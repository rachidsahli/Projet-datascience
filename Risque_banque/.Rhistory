select(id_client)
} else {
# Si flag_parrain == 1 a déjà 2000 observations ou plus, on sélectionne uniquement ces observations
ciblage_profil <- prioritaires_parrain %>%
slice_sample(n = 2000) %>%
select(id_client)
}
# Afficher les 6 premières lignes du résultat
head(ciblage_profil)
manque <- 2000 - nrow(prioritaires_parrain)
if (manque > 0) {
complementaires <- prioritaires %>%
filter(flag_parrain != 1)
complementaires_sample <- complementaires %>% sample_n(manque)
ciblage_profil <- bind_rows(prioritaires_parrain, complementaires_sample) %>%
select(id_client)
} else {
# Si flag_parrain == 1 a déjà 2000 observations ou plus, on sélectionne uniquement ces observations
ciblage_profil <- prioritaires_parrain %>%
slice_sample(n = 2000) %>%
select(id_client)
}
prioritaires_parrain <- prioritaires %>%
filter(flag_est_parrain == 1)
manque <- 2000 - nrow(prioritaires_parrain)
if (manque > 0) {
complementaires <- prioritaires %>%
filter(flag_est_parrain != 1)
complementaires_sample <- complementaires %>% sample_n(manque)
ciblage_profil <- bind_rows(prioritaires_parrain, complementaires_sample) %>%
select(id_client)
} else {
ciblage_profil <- prioritaires_parrain %>%
slice_sample(n = 2000) %>%
select(id_client)
}
head(ciblage_profil)
prioritaires_parrain <- prioritaires %>%
filter(flag_est_parrain == 1)
manque <- 2000 - nrow(prioritaires_parrain)
if (manque > 0) {
}
prioritaires_parrain <- prioritaires %>%
filter(flag_est_parrain == 1)
manque <- 2000 - nrow(prioritaires_parrain)
if (manque > 0) {
complementaires <- prioritaires %>%
filter(flag_est_parrain != 1)
complementaires_sample <- complementaires %>% sample_n(manque)
ciblage_profil <- bind_rows(prioritaires_parrain, complementaires_sample) %>%
select(id_client)
} else {
ciblage_profil <- prioritaires_parrain %>%
slice_sample(n = 2000)
}
prioritaires_parrain <- prioritaires %>%
filter(flag_est_parrain == 1)
manque <- 2000 - nrow(prioritaires_parrain)
if (manque > 0) {
complementaires <- prioritaires %>%
filter(flag_est_parrain != 1)
complementaires_sample <- complementaires %>% sample_n(manque)
ciblage_profil <- bind_rows(prioritaires_parrain, complementaires_sample) %>%
select(id_client)
} else {
ciblage_profil <- prioritaires_parrain %>%
slice_sample(n = 2000) %>%
select(id_client)
}
write.table(ciblage_profil, "sae_datamining/data/traitement/C3_SAHLI.txt",
fileEncoding = "UTF-8", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(ciblage_profil, "sae_datamining/data/ciblage/C3_SAHLI.txt",
fileEncoding = "UTF-8", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(ciblage_profil, "sae_data_mining/data/ciblage/C3_SAHLI.txt",
fileEncoding = "UTF-8", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(ciblage_profil, "/Users/rs777/Documents/Iut/projets but stid/2024-2025/sae_data_mining/data/ciblage/C3_SAHLI.txt",
fileEncoding = "UTF-8", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(ciblage_profil, "/Users/rs777/Documents/Iut/projets but stid/2024-2025/sae_data_mining/ciblage/C3_SAHLI.txt",
fileEncoding = "UTF-8", row.names = FALSE, col.names = FALSE, quote = FALSE)
# Import library -----
library(tidyverse)      # Manipulation des données et graphiques
library(conflicted)     # Gestion des conflits entre les packages
library(questionr)      # Statistiques descriptives
library(lubridate)      # Manipulation de dates
library(knitr)          # Realisation de tableau
library(vcd)            # V de Cramer et T de Tschuprow
library(corrplot)       # Matrice de corrélation
# Gestion des conflits de noms de fonction entre différents packages
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("slice", "dplyr")
# Import data -----
data <- read.table("/Users/rs777/Documents/Iut/projets but stid/2024-2025/sae_data_mining/data/base_tourisme_2022_12.txt", sep = ";",
header = TRUE)
cac_40 <- read.table("~/Documents/Projet-datascience/App_finance/Data/cac_40.csv",
encoding = "UTF-8", sep = ";",
header = TRUE, na.strings = "")
cac_40 <- read.table("~/Documents/Projet-datascience/App_finance/Data/cac_40.csv",
encoding = "UTF-8", sep = ",",
header = TRUE, na.strings = "")
library(tidyverse)      # Manipulation des données et graphiques
library(conflicted)     # Gestion des conflits de noms de fonctions entre packages
library(knitr)          # Création de tableau
library(gridExtra)      # Arrangement de graphique
library(lubridate)      # Gestion des dates
library(questionr)      # Statistiques descriptives
library(skimr)          # Statistiques descriptives
library(BioStatR)       # Mesures de liaison pour les variables quantitatives (rapport de corrélation)
library(DescTools)      # Mesures de liaison pour les variables qualitatives (Cramer, Tschuprow)
library(corrplot)       # Corrélation
library(woeBinning)     # Discrétisation supervisée
library(smbinning)      # Discrétisation supervisée
library(caret)          # Modélisation - Général
library(pROC)           # Modélisation - Général
library(carData)        # Modélisation - Régression logistique
library(car)            # Modélisation - Régression logistique
library(blorr)          # Modélisation - Régression logistique
library(emmeans)        # Modélisation - Régression logistique
library(broom)          # Modélisation - Régression logistique
library(glmnet)         # Modélisation - Régression logistique pénalisée
library(rpart)          # Modélisation - Arbre de décision
library(rpart.plot)     # Modélisation - Arbre de décision
library(class)          # Modélisation - k plus proches voisins
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("slice", "dplyr")
periode_2021 <- read_sas("data/bt2021.sas7bdat")
periode_2022 <- read_sas("data/bt2022.sas7bdat")
periode_2023 <- read_sas("data/bt2023.sas7bdat")
library(tidyverse)      # Manipulation des données et graphiques
library(conflicted)     # Gestion des conflits de noms de fonctions entre packages
library(knitr)          # Création de tableau
library(gridExtra)      # Arrangement de graphique
library(haven)          # Lecture table SAS
library(lubridate)      # Gestion des dates
library(questionr)      # Statistiques descriptives
library(skimr)          # Statistiques descriptives
library(BioStatR)       # Mesures de liaison pour les variables quantitatives (rapport de corrélation)
library(DescTools)      # Mesures de liaison pour les variables qualitatives (Cramer, Tschuprow)
library(FactoMineR)     # Caractérisation des classes
library(naniar)         # Gestion des valeurs manquantes
library(zoo)            # Gestion des valeurs manquantes
library(corrplot)       # Corrélation
library(woeBinning)     # Discrétisation supervisée
library(smbinning)      # Discrétisation supervisée
library(caret)          # Modélisation - Général
library(pROC)           # Modélisation - Général
library(carData)        # Modélisation - Régression logistique
library(car)            # Modélisation - Régression logistique
library(blorr)          # Modélisation - Régression logistique
library(emmeans)        # Modélisation - Régression logistique
library(broom)          # Modélisation - Régression logistique
library(glmnet)         # Modélisation - Régression logistique pénalisée
library(rpart)          # Modélisation - Arbre de décision
library(rpart.plot)     # Modélisation - Arbre de décision
library(class)          # Modélisation - k plus proches voisins
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("slice", "dplyr")
periode_2021 <- read_sas("data/bt2021.sas7bdat")
periode_2022 <- read_sas("data/bt2022.sas7bdat")
periode_2023 <- read_sas("data/bt2023.sas7bdat")
periode_reference <- read_sas("data/btref.sas7bdat")
setwd("/Users/rs777/Documents/Projet-datascience/Risque_banque")
periode_2021 <- read_sas("data/bt2021.sas7bdat")
periode_2022 <- read_sas("data/bt2022.sas7bdat")
periode_2023 <- read_sas("data/bt2023.sas7bdat")
periode_reference <- read_sas("data/btref.sas7bdat")
table(periode_2021$PD_ID_NDD)
1982/nrow(periode_2021)
1982/nrow(periode_2021)*100
1934/nrow(periode_2022)*100
4347/nrow(periode_2023)*100
1769/nrow(periode_reference)*100
prop_2021 <- prop.table(table(periode_2021$PD_ID_NDD, useNA = "no"))
prop_2021
periode_2021$PD_ID_NDD[periode_2021$PD_ID_NDD == ""] <- NA
prop_2021 <- prop.table(table(periode_2021$PD_ID_NDD, useNA = "no"))
prop_2021
periode_2021$PD_ID_NDD[is.na(periode_2021$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2021)),
size = sum(is.na(periode_2021$PD_ID_NDD)),
replace = TRUE,
prob = prop_2021
)
# Vérification des distributions
table_original <- table(periode_2021$PD_ID_NDD, useNA = "no")
table_proportion <- table(periode_2021$PD_ID_NDD)
rm(prop_2021)
rm(table_original)
rm(table_proportion)
# Vérification des distributions
prop.table(table(periode_2021$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2021$PD_ID_NDD)) # Table après remplacement
table(periode_2021$PD_ID_NDD)
periode_2021 <- read_sas("data/bt2021.sas7bdat")
periode_2022 <- read_sas("data/bt2022.sas7bdat")
periode_2023 <- read_sas("data/bt2023.sas7bdat")
periode_reference <- read_sas("data/btref.sas7bdat")
periode_2021 <- periode_2021 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2021 <- periode_2021 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2021$DS_DT_GESTIONDEF <- as.Date(periode_2021$DS_DT_GESTIONDEF) # Transformation au format date
periode_2021$PD_ID_NDD[periode_2021$PD_ID_NDD == ""] <- NA
prop_2021 <- prop.table(table(periode_2021$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_2021$PD_ID_NDD[is.na(periode_2021$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2021)),
size = sum(is.na(periode_2021$PD_ID_NDD)),
replace = TRUE,
prob = prop_2021
)
# Vérification des distributions
prop.table(table(periode_2021$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2021$PD_ID_NDD)) # Table après remplacement
table(periode_2021$PD_ID_NDD)
periode_2021 <- read_sas("data/bt2021.sas7bdat")
periode_2021 <- periode_2021 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2021 <- periode_2021 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2021$DS_DT_GESTIONDEF <- as.Date(periode_2021$DS_DT_GESTIONDEF) # Transformation au format date
periode_2021$PD_ID_NDD[periode_2021$PD_ID_NDD == ""] <- NA
prop_2021 <- prop.table(table(periode_2021$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_2021$PD_ID_NDD[is.na(periode_2021$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2021)),
size = sum(is.na(periode_2021$PD_ID_NDD)),
replace = TRUE,
prob = prop_2021
)
# Vérification des distributions
prop.table(table(periode_2021$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2021$PD_ID_NDD)) # Table après remplacement
table(periode_2021$PD_ID_NDD)
View(periode_2021)
gc()
periode_2021 <- read_sas("data/bt2021.sas7bdat")
periode_2021 <- periode_2021 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2021 <- periode_2021 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2021$DS_DT_GESTIONDEF <- as.Date(periode_2021$DS_DT_GESTIONDEF) # Transformation au format date
periode_2022 <- periode_2022 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2022 <- periode_2022 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2022 <- read_sas("data/bt2022.sas7bdat")
periode_2023 <- read_sas("data/bt2023.sas7bdat")
periode_reference <- read_sas("data/btref.sas7bdat")
periode_2022 <- periode_2022 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2022 <- periode_2022 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2022$DS_DT_GESTIONDEF <- as.Date(periode_2022$DS_DT_GESTIONDEF) # Transformation au format date
periode_2023 <- periode_2023 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2023 <- periode_2023 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2023$DS_DT_GESTIONDEF <- as.Date(periode_2023$DS_DT_GESTIONDEF) # Transformation au format date
periode_reference <- periode_reference %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_reference <- periode_reference %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_reference$DS_DT_GESTIONDEF <- as.Date(periode_reference$DS_DT_GESTIONDEF) # Transformation au format date
periode_2021$PD_ID_NDD[periode_2021$PD_ID_NDD == ""] <- NA
prop_2021 <- prop.table(table(periode_2021$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_2021$PD_ID_NDD[is.na(periode_2021$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2021)),
size = sum(is.na(periode_2021$PD_ID_NDD)),
replace = TRUE,
prob = prop_2021
)
# Vérification des distributions
prop.table(table(periode_2021$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2021$PD_ID_NDD)) # Table après remplacement
periode_2022$PD_ID_NDD[periode_2022$PD_ID_NDD == ""] <- NA
prop_2022 <- prop.table(table(periode_2022$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_2022$PD_ID_NDD[is.na(periode_2022$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2022)),
size = sum(is.na(periode_2022$PD_ID_NDD)),
replace = TRUE,
prob = prop_2022
)
# Vérification des distributions
prop.table(table(periode_2022$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2022$PD_ID_NDD)) # Table après remplacement
periode_2023$PD_ID_NDD[periode_2023$PD_ID_NDD == ""] <- NA
prop_2023 <- prop.table(table(periode_2023$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_2023$PD_ID_NDD[is.na(periode_2023$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2023)),
size = sum(is.na(periode_2023$PD_ID_NDD)),
replace = TRUE,
prob = prop_2023
)
# Vérification des distributions
prop.table(table(periode_2023$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2023$PD_ID_NDD)) # Table après remplacement
periode_reference$PD_ID_NDD[periode_reference$PD_ID_NDD == ""] <- NA
prop_reference <- prop.table(table(periode_reference$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_reference$PD_ID_NDD[is.na(periode_reference$PD_ID_NDD)] <- sample(
as.numeric(names(prop_reference)),
size = sum(is.na(periode_reference$PD_ID_NDD)),
replace = TRUE,
prob = prop_reference
)
# Vérification des distributions
prop.table(table(periode_reference$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_reference$PD_ID_NDD)) # Table après remplacement
check_vide <- function(data) {
sapply(data, function(col) {
if (is.factor(col)) {
sum(is.na(col) | col == "")
} else {
sum(is.na(col))
}
})
}
kable(check_vide(periode_2021), col.names = c("Variables","Valeurs vides")) # Valeur "vide"
m
pct_miss(periode_2021) ## 0 % de valeurs manquantes total
skim(periode_2021) ### Audit
table(periode_2021$PD_ID_NDD)
# Vérification des catégories uniques
unique(periode_2021$PD_ID_NDD)
# Supprimer les observations avec PD_ID_NDD == 0
periode_2021 <- subset(periode_2021, PD_ID_NDD != 0)
periode_2021$PD_ID_NDD <- droplevels(periode_2021$PD_ID_NDD)
gc()
periode_2021 <- read_sas("data/bt2021.sas7bdat")
periode_2022 <- read_sas("data/bt2022.sas7bdat")
periode_2023 <- read_sas("data/bt2023.sas7bdat")
periode_reference <- read_sas("data/btref.sas7bdat")
periode_2021 <- periode_2021 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2021 <- periode_2021 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2021$DS_DT_GESTIONDEF <- as.Date(periode_2021$DS_DT_GESTIONDEF) # Transformation au format date
periode_2022 <- periode_2022 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2022 <- periode_2022 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2022$DS_DT_GESTIONDEF <- as.Date(periode_2022$DS_DT_GESTIONDEF) # Transformation au format date
periode_2023 <- periode_2023 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2023 <- periode_2023 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2023$DS_DT_GESTIONDEF <- as.Date(periode_2023$DS_DT_GESTIONDEF) # Transformation au format date
periode_reference <- periode_reference %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_reference <- periode_reference %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_reference$DS_DT_GESTIONDEF <- as.Date(periode_reference$DS_DT_GESTIONDEF) # Transformation au format date
periode_2021$PD_ID_NDD[periode_2021$PD_ID_NDD == ""] <- NA
prop_2021 <- prop.table(table(periode_2021$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_2021$PD_ID_NDD[is.na(periode_2021$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2021)),
size = sum(is.na(periode_2021$PD_ID_NDD)),
replace = TRUE,
prob = prop_2021
)
# Vérification des distributions
prop.table(table(periode_2021$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2021$PD_ID_NDD)) # Table après remplacement
periode_2021$PD_ID_NDD <- droplevels(periode_2021$PD_ID_NDD)
periode_2022$PD_ID_NDD <- droplevels(periode_2022$PD_ID_NDD)
periode_2023$PD_ID_NDD <- droplevels(periode_2023$PD_ID_NDD)
periode_reference$PD_ID_NDD <- droplevels(periode_reference$PD_ID_NDD)
skim(periode_2022) ### Audit
# Vérifier les colonnes avec des chaînes vides
cols_with_empty <- sapply(periode_2021, function(x) any(x == ""))
names(cols_with_empty[cols_with_empty])
cols_with_empty
View(periode_2022)
# Vérifiez si la colonne est complètement manquante
summary(periode_2021$DS_DT_GESTIONDEF)
# Vérifiez son type
class(periode_2021$DS_DT_GESTIONDEF)
gc()
periode_2021 <- read_sas("data/bt2021.sas7bdat")
periode_2022 <- read_sas("data/bt2022.sas7bdat")
periode_2023 <- read_sas("data/bt2023.sas7bdat")
periode_reference <- read_sas("data/btref.sas7bdat")
periode_2021 <- periode_2021 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2021 <- periode_2021 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2021$DS_DT_GESTIONDEF <- as.Date(periode_2021$DS_DT_GESTIONDEF) # Transformation au format date
periode_2022 <- periode_2022 %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_2022 <- periode_2022 %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_2022$DS_DT_GESTIONDEF <- as.Date(periode_2022$DS_DT_GESTIONDEF) # Transformation au format date
periode_reference <- periode_reference %>%
mutate(across(everything(), ~ { attr(., "label") <- NULL; . })) # Suppression des labes de toutes les var
periode_reference <- periode_reference %>%
mutate(across(where(is.character), as.factor)) # Transformation en factor() des var ql
periode_reference$DS_DT_GESTIONDEF <- as.Date(periode_reference$DS_DT_GESTIONDEF) # Transformation au format date
periode_2021$PD_ID_NDD[periode_2021$PD_ID_NDD == ""] <- NA
prop_2021 <- prop.table(table(periode_2021$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_2021$PD_ID_NDD[is.na(periode_2021$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2021)),
size = sum(is.na(periode_2021$PD_ID_NDD)),
replace = TRUE,
prob = prop_2021
)
# Vérification des distributions
prop.table(table(periode_2021$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2021$PD_ID_NDD)) # Table après remplacement
periode_2021$PD_ID_NDD <- droplevels(periode_2021$PD_ID_NDD) # Réinitialisation des facteurs
# 2022
periode_2022$PD_ID_NDD[periode_2022$PD_ID_NDD == ""] <- NA
prop_2022 <- prop.table(table(periode_2022$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_2022$PD_ID_NDD[is.na(periode_2022$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2022)),
size = sum(is.na(periode_2022$PD_ID_NDD)),
replace = TRUE,
prob = prop_2022
)
# Vérification des distributions
prop.table(table(periode_2022$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2022$PD_ID_NDD)) # Table après remplacement
periode_2022$PD_ID_NDD <- droplevels(periode_2022$PD_ID_NDD) # Réinitialisation des facteurs
# 2023
periode_2023$PD_ID_NDD[periode_2023$PD_ID_NDD == ""] <- NA
prop_2023 <- prop.table(table(periode_2023$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_2023$PD_ID_NDD[is.na(periode_2023$PD_ID_NDD)] <- sample(
as.numeric(names(prop_2023)),
size = sum(is.na(periode_2023$PD_ID_NDD)),
replace = TRUE,
prob = prop_2023
)
# Vérification des distributions
prop.table(table(periode_2023$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_2023$PD_ID_NDD)) # Table après remplacement
periode_2023$PD_ID_NDD <- droplevels(periode_2023$PD_ID_NDD) # Réinitialisation des facteurs
periode_reference$PD_ID_NDD[periode_reference$PD_ID_NDD == ""] <- NA
prop_reference <- prop.table(table(periode_reference$PD_ID_NDD, useNA = "no"))
set.seed(123)
periode_reference$PD_ID_NDD[is.na(periode_reference$PD_ID_NDD)] <- sample(
as.numeric(names(prop_reference)),
size = sum(is.na(periode_reference$PD_ID_NDD)),
replace = TRUE,
prob = prop_reference
)
# Vérification des distributions
prop.table(table(periode_reference$PD_ID_NDD, useNA = "no")) # Table initial
prop.table(table(periode_reference$PD_ID_NDD)) # Table après remplacement
periode_reference$PD_ID_NDD <- droplevels(periode_reference$PD_ID_NDD) # Réinitialisation des facteurs
plot_quanti <- function(data, variable) {
var <- data[[variable]]
par(mfrow = c(1, 2))
# Graphique
hist(var, main = paste("Histogramme de", variable),
xlab = variable, col = "lightblue", border = "black")
boxplot(var, main = paste("Boxplot de", variable),
ylab = variable, col = "pink")
par(mfrow = c(1, 1))
}
lapply(names(periode_2021[var_quanti], function(var) plot_quanti(periode_2021, var))
))
var_quanti <- sapply(periode_2021, is.numeric)
lapply(names(periode_2021[var_quanti], function(var) plot_quanti(periode_2021, var)))
var_quanti <- sapply(periode_2021, is.numeric)
lapply(names(periode_2021[var_quanti], function(var) plot_quanti(periode_2021, var)))
plot_quanti <- function(data, variable) {
var <- data[[variable]]
par(mfrow = c(1, 2))
# Graphique
hist(var, main = paste("Histogramme de", variable),
xlab = variable, col = "lightblue", border = "black")
boxplot(var, main = paste("Boxplot de", variable),
ylab = variable, col = "pink")
par(mfrow = c(1, 1))
}
var_quanti <- sapply(periode_2021, is.numeric)
lapply(names(periode_2021[var_quanti], function(var) plot_quanti(periode_2021, var)))
plot_quanti <- function(data, variable) {
var <- data[[variable]]
par(mfrow = c(1, 2))
# Graphique
hist(var, main = paste("Histogramme de", variable),
xlab = variable, col = "lightblue", border = "black")
boxplot(var, main = paste("Boxplot de", variable),
ylab = variable, col = "pink")
par(mfrow = c(1, 1))
}
var_quanti <- sapply(periode_2021, is.numeric)
lapply(names(periode_2021[var_quanti], function(var) plot_quanti(periode_2021, var)))
lapply(names(periode_2021)[var_quanti], function(var) plot_quanti(periode_2021, var))
lapply(names(periode_2021)[var_quanti], function(var) plot_quanti(periode_2021, var))
plot_quali <- function(data, variable) {
var <- as.factor(data[[variable]])
if (length(unique(var)) > 30) {
warning(paste("La variable", variable, "a trop de catégories pour être affichée correctement."))
return(NULL)
}
barplot(table(var),
main = paste("Barplot de", variable), xlab = variable, ylab = "Fréquence", col = "lightgreen",
border = "black", las = 0.5)
}
var_quali <- sapply(periode_2021, function(x) is.factor(x) || is.character(x))
lapply(names(periode_2021)[var_quali], function(var) plot_quali(periode_2021, var))
